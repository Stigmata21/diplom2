import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from "../../../../../auth/authOptions";
import { query } from '@/lib/db';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

/**
 * API маршрут для скачивания отчета в формате HTML
 */
export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: 'Не авторизован' }, { status: 401 });
    }

    // Получаем и явно конвертируем params.id в строку
    const reportId = String(params.id);
    
    console.log('Запрос на скачивание отчета ID:', reportId);
    
    // Получаем отчет с проверкой доступа
    const reports = await query<any>(
      `SELECT fr.*, cu.role_in_company, u.username as author_name, c.name as company_name
       FROM financial_reports fr
       JOIN company_users cu ON fr.company_id = cu.company_id
       JOIN users u ON fr.author_id = u.id
       JOIN companies c ON fr.company_id = c.id
       WHERE fr.id = $1 AND cu.user_id = $2`,
      [reportId, session.user.id]
    );

    if (reports.length === 0) {
      return NextResponse.json({ error: 'Отчет не найден или нет доступа' }, { status: 404 });
    }

    const report = reports[0];
    console.log('Найден отчет:', report.title, 'тип:', report.type);
    
    // Если у отчета уже есть файл, возвращаем его
    if (report.file_url) {
      // Проверяем наличие файла в публичной директории
      const publicFilePath = path.join(process.cwd(), 'public', report.file_url);
      
      if (fs.existsSync(publicFilePath)) {
        console.log('Использую существующий файл:', publicFilePath);
        // Считываем файл и возвращаем его
        const fileBuffer = fs.readFileSync(publicFilePath);
        
        // Определяем тип контента по расширению файла
        const extension = path.extname(publicFilePath).toLowerCase();
        const contentType = extension === '.html' ? 'text/html; charset=utf-8' : 'application/pdf';
        
        return new NextResponse(fileBuffer, {
          headers: {
            'Content-Type': contentType,
            'Content-Disposition': `inline; filename="report_${reportId}${extension}"`,
          },
        });
      }
    }
    
    // Если файла нет, создаем его на лету
    // Директория для сохранения файлов в публичной папке
    const uploadsDir = path.join(process.cwd(), 'public', 'uploads', 'reports');
    if (!fs.existsSync(uploadsDir)) {
      fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    // Имя файла
    const fileName = `report_${report.company_id}_${uuidv4()}.html`;
    const filePath = path.join(uploadsDir, fileName);
    
    // Парсим данные отчета
    let reportData;
    try {
      // Пробуем распарсить данные, если они в формате строки
      if (typeof report.data === 'string') {
        reportData = JSON.parse(report.data);
      } else {
        reportData = report.data || {};
      }
      console.log('Данные отчета:', reportData);
    } catch (e) {
      console.error('Ошибка при парсинге данных отчета:', e);
      reportData = {};
    }
    
    // Получаем финансовые показатели
    // Убедимся, что значения правильно извлечены и приведены к числовому типу
    const income = reportData.income !== undefined ? Number(reportData.income) : 0;
    const expenses = reportData.expenses !== undefined ? Number(reportData.expenses) : 0;
    const profit = reportData.profit !== undefined ? Number(reportData.profit) : (income - expenses);
    
    console.log('Финансовые показатели для отчета:', {
      income,
      expenses,
      profit
    });
    
    // Форматируем для отображения
    const incomeFormatted = income.toLocaleString('ru-RU') + ' ₽';
    const expensesFormatted = expenses.toLocaleString('ru-RU') + ' ₽';
    const profitFormatted = profit.toLocaleString('ru-RU') + ' ₽';
    
    // Дополнительная информация для годового отчета
    let additionalContent = '';
    if (report.type === 'Годовой') {
      const monthsCovered = reportData.monthsCovered || 0;
      
      additionalContent = `
      <h2>Дополнительная информация</h2>
      <div class="finance-card">
        <div class="info-row"><strong>Текущий период:</strong> ${monthsCovered} мес. из 12</div>
        <div class="info-row"><strong>Представлены данные за:</strong> ${monthsCovered} ${monthsCovered === 1 ? 'месяц' : monthsCovered < 5 ? 'месяца' : 'месяцев'}</div>
      </div>`;
    }
    
    // Создаем HTML-страницу для отчета
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>Финансовый отчет</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          padding: 40px;
          max-width: 800px;
          margin: 0 auto;
          line-height: 1.5;
        }
        h1 {
          text-align: center;
          color: #2c3e50;
          margin-bottom: 30px;
        }
        h2 {
          font-size: 18px;
          margin: 30px 0 15px 0;
          padding-bottom: 5px;
          border-bottom: 1px solid #eee;
          color: #2980b9;
        }
        h3 {
          font-size: 16px;
          margin: 20px 0 10px 0;
          color: #2980b9;
        }
        .info-row {
          margin-bottom: 10px;
        }
        .info-row strong {
          font-weight: bold;
        }
        .finance-row {
          display: flex;
          justify-content: space-between;
          margin-bottom: 10px;
          padding: 5px 0;
          border-bottom: 1px solid #f0f0f0;
        }
        .income {
          color: #27ae60;
          font-weight: bold;
        }
        .expense {
          color: #c0392b;
          font-weight: bold;
        }
        .profit {
          color: #2980b9;
          font-weight: bold;
        }
        .footer {
          margin-top: 40px;
          text-align: center;
          font-size: 12px;
          color: #7f8c8d;
        }
        .finance-card {
          background-color: #f9f9f9;
          border-radius: 8px;
          padding: 20px;
          margin-bottom: 20px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
      </style>
    </head>
    <body>
      <h1>Финансовый отчет</h1>
      
      <div class="finance-card">
        <div class="info-row"><strong>Название:</strong> ${report.title}</div>
        <div class="info-row"><strong>Тип:</strong> ${report.type}</div>
        <div class="info-row"><strong>Период:</strong> ${report.period || 'Не указан'}</div>
        <div class="info-row"><strong>Компания:</strong> ${report.company_name}</div>
        <div class="info-row"><strong>Автор:</strong> ${report.author_name}</div>
        <div class="info-row"><strong>Дата создания:</strong> ${new Date(report.created_at).toLocaleDateString('ru-RU')}</div>
      </div>
      
      <h2>Финансовые показатели</h2>
      
      <div class="finance-card">
        <div class="finance-row">
          <div><strong>Доходы:</strong></div>
          <div class="income">${incomeFormatted}</div>
        </div>
        
        <div class="finance-row">
          <div><strong>Расходы:</strong></div>
          <div class="expense">${expensesFormatted}</div>
        </div>
        
        <div class="finance-row">
          <div><strong>Прибыль:</strong></div>
          <div class="profit">${profitFormatted}</div>
        </div>
      </div>
      
      ${additionalContent}
      
      <div class="footer">
        Отчет сформирован: ${new Date().toLocaleString('ru-RU')}
      </div>
    </body>
    </html>`;
    
    // Сохраняем HTML в файл
    fs.writeFileSync(filePath, htmlContent, 'utf8');
    
    // URL файла для сохранения в базе данных
    const fileUrl = `/uploads/reports/${fileName}`;
    
    // Обновляем запись в базе данных
    await query(
      `UPDATE financial_reports SET file_url = $1 WHERE id = $2`,
      [fileUrl, reportId]
    );
    
    // Логируем действие
    await query(
      `INSERT INTO company_logs (company_id, user_id, action, meta)
       VALUES ($1, $2, $3, $4)`, 
      [
        report.company_id, 
        session.user.id, 
        'Скачивание финансового отчета', 
        JSON.stringify({ reportId, title: report.title })
      ]
    );
    
    // Возвращаем HTML
    return NextResponse.redirect(new URL(fileUrl, request.url));
  } catch (error) {
    console.error('Ошибка при скачивании отчета:', error);
    return NextResponse.json({ error: 'Ошибка сервера' }, { status: 500 });
  }
} 